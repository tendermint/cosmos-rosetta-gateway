// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	alttendermint "github.com/tendermint/cosmos-rosetta-gateway/cosmos/launchpad/client/tendermint"

	mock "github.com/stretchr/testify/mock"
)

// TendermintClient is an autogenerated mock type for the TendermintClient type
type TendermintClient struct {
	mock.Mock
}

// Block provides a mock function with given fields: height
func (_m *TendermintClient) Block(height uint64) (alttendermint.BlockResponse, error) {
	ret := _m.Called(height)

	var r0 alttendermint.BlockResponse
	if rf, ok := ret.Get(0).(func(uint64) alttendermint.BlockResponse); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(alttendermint.BlockResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockByHash provides a mock function with given fields: hash
func (_m *TendermintClient) BlockByHash(hash string) (alttendermint.BlockResponse, error) {
	ret := _m.Called(hash)

	var r0 alttendermint.BlockResponse
	if rf, ok := ret.Get(0).(func(string) alttendermint.BlockResponse); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(alttendermint.BlockResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetInfo provides a mock function with given fields:
func (_m *TendermintClient) NetInfo() (alttendermint.NetInfoResponse, error) {
	ret := _m.Called()

	var r0 alttendermint.NetInfoResponse
	if rf, ok := ret.Get(0).(func() alttendermint.NetInfoResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(alttendermint.NetInfoResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tx provides a mock function with given fields: hash
func (_m *TendermintClient) Tx(hash string) (alttendermint.TxResponse, error) {
	ret := _m.Called(hash)

	var r0 alttendermint.TxResponse
	if rf, ok := ret.Get(0).(func(string) alttendermint.TxResponse); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(alttendermint.TxResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxSearch provides a mock function with given fields: query
func (_m *TendermintClient) TxSearch(query string) (alttendermint.TxSearchResponse, error) {
	ret := _m.Called(query)

	var r0 alttendermint.TxSearchResponse
	if rf, ok := ret.Get(0).(func(string) alttendermint.TxSearchResponse); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(alttendermint.TxSearchResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnconfirmedTxs provides a mock function with given fields:
func (_m *TendermintClient) UnconfirmedTxs() (alttendermint.UnconfirmedTxsResponse, error) {
	ret := _m.Called()

	var r0 alttendermint.UnconfirmedTxsResponse
	if rf, ok := ret.Get(0).(func() alttendermint.UnconfirmedTxsResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(alttendermint.UnconfirmedTxsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
